{"version":3,"sources":["components/layout/Header.js","components/AddTodo.js","components/TodoItem.js","components/Todos.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","to","linkStyle","textAlign","backgroundColor","padding","textDecoration","AddTodo","state","title","onSubmit","e","preventDefault","props","addTodo","setState","onChange","target","name","value","this","display","type","placeholder","flex","className","Component","TodoItem","getStyle","todo","completed","borderBottom","id","markComplete","bind","onClick","delTodo","delBtn","color","border","borderRadius","float","cursor","fontSize","fontWeight","Todos","todos","map","key","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecd98439.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n    return (\n        <header style={headerStyle}>\n            <h2>\n                React Todo App\n            </h2>\n            <Link to=\"/\" style={linkStyle}>Home</Link> | <Link to=\"/about\" style={linkStyle}>About</Link>\n        </header>\n    )\n}\n\n/*** Styles ***/\nconst headerStyle = {\n    textAlign: 'center',\n    backgroundColor: '#ccc',\n    padding: '10px'\n}\nconst linkStyle = {\n    textDecoration: 'none'\n}\n/*** ***/\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state = {\n        title : ''\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title : '' });\n    }\n\n    onChange = (e) => this.setState({ [e.target.name] : e.target.value })\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{ display:'flex' }}>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Add new todo here...\"\n                    style={{ flex: '10', padding : '10px 5px'}}\n                    value={ this.state.title}\n                    onChange={ this.onChange } \n                />\n                <input\n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn\"\n                    style={{ flex : '1' }}\n                />\n            </form>\n        )\n    }\n}\n\n//Prop Types\nAddTodo.propTypes = {\n    addTodo : PropTypes.func.isRequired\n}\n\nexport default AddTodo\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            textDecoration : this.props.todo.completed ? 'line-through':'none',\n            backgroundColor : '#f4f4f4',\n            borderBottom: '1px #ccc dotted',\n            padding : '10px'  \n        }\n    }\n    render() {\n        const {id,title} = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>\n                    {'  '}\n                    {title}\n                    <button onClick={this.props.delTodo.bind(this,id)} style={delBtn}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n/*** styles ***/\nconst delBtn = {\n    backgroundColor : '#f00',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '50%',\n    float : 'right',\n    cursor : 'pointer',\n    padding : '2px 6px',\n    fontSize: '16px',\n    fontWeight: 'bold'\n\n}\n/*** styles ***/\n\nTodoItem.propTypes = {\n    todo : PropTypes.object.isRequired,\n    markComplete : PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\nexport default TodoItem\n","import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types'\n\nclass Todos extends Component {\n    render() {\n        return this.props.todos.map((todo) =>(\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ))\n    }\n}\n\n//Prop Types\nTodos.propTypes = {\n    todos : PropTypes.array.isRequired,\n    markComplete : PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\nexport default Todos;\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <React.Fragment>\n            <div style={{ textAlign : 'center' }}>\n                <h3>About Us</h3>\n                <p>This is Todo App built with react.js</p>\n            </div>\n        </React.Fragment>\n    )\n}\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport Todos from './components/Todos';\nimport uuid from 'uuid';\nimport About from './components/pages/About';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    todos : []\n  }\n\n  componentDidMount() {\n    axios\n      .get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then((res) => this.setState({ todos : res.data }));\n  }\n\n  //toggle complete\n  markComplete = (id) => {\n      this.setState({todos:this.state.todos.map(todo => {\n        if(todo.id == id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })});\n  }\n\n  //delete todo\n  delTodo = (id) => {\n    axios\n      .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then( res => this.setState({todos: [...this.state.todos.filter(todo => todo.id != id)]}));\n  }\n\n  //add todo\n  addTodo = (title) => {\n    axios\n      .post('https://jsonplaceholder.typicode.com/todos', {title, completed:false})\n      .then(res => this.setState({ todos : [...this.state.todos, res.data]}));\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header/>\n            <Route exact path=\"/\" render={(props) => (\n                  <React.Fragment>\n                    <AddTodo addTodo={this.addTodo}/>\n                    <Todos todos = {this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n                  </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About}/>\n          </div>\n        </div>\n      </Router>\n    ); \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}